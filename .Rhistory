T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
# Train and test periods
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
library(quantmod)
setSymbolLookup(IBM=list(name='IBM',src='yahoo'))
getSymbols(c('IBM'))
colnames(IBM) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
source("Model.Construction.R")
source("ModelConstruction.R")
source("Model Construction.R")
model_construction(IBM)
model_construction <- function(user.quote){
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
data.model <- specifyModel(T.ind(user.quote) ~ Delt(Cl(user.quote),k=1:10) +
myATR(user.quote) + mySMI(user.quote) + myADX(user.quote) + myAroon(user.quote) +
myBB(user.quote) + myChaikinVol(user.quote) + myCLV(user.quote) +
CMO(Cl(user.quote)) + EMA(Delt(Cl(user.quote))) + myEMV(user.quote) +
myVolat(user.quote) + myMACD(user.quote) + myMFI(user.quote) + RSI(Cl(user.quote)) +
mySAR(user.quote) + runMean(Cl(user.quote)) + runSD(Cl(user.quote)))
return(data.model)
}
model_construction(IBM)
model_construction("IBM")
source("Model Construction.R")
model_construction(IBM)
IBM
rm(list=ls())
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
getSymbols(c('IBM'))
IBM
IBM[c(1,nrow(IBM)),]
getSymbols(c('IBM'),start="1970-01-01")
IBM[c(1,nrow(IBM)),]
source("Model Construction.R")
user.quote <- "TAP.AX"
getSymbols(user.quote,start="1970-01-01")
colnames(user.quote) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
user.quote
TAP.AX
colnames(TAP.AX) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
colnames(user.quote[1]) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
getSymbols(user.quote, from = "1970-01-01", to = "2009-09-15")
user.quote <- "IBM"
library(quantmod)
# setSymbolLookup(IBM=list(name='IBM',src='yahoo'))
getSymbols(user.quote, from = "1970-01-01", to = "2009-09-15")
IBM[c(1,nrow(IBM)),]
user.quote <- "IBM"
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",
quote=c("Open", "High", "Low", "Close","Volume","Adjusted")))
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
source("Model Construction.R")
model_construction(quote.data)
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
quote.data$Volume <- quote.data$Volume + 0.000000001
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
1^-15
10^-15
rm(list=ls())
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
# Train and test periods
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
user.quote <- "IBM"
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
source("Model Construction.R")
model_construction(quote.data)
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
model_construction(quote.data)
rm(list=ls())
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
# Train and test periods
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
user.quote <- "IBM"
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
#############################################################################################################################################
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
data.model
quote.data
Tdata.train <- as.data.frame(modelData(data.model, data.window=c('1970-01-02','2012-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c('2013-01-01','2014-08-18'))))
Tform <- as.formula('T.ind.TAP.AX ~ .')
Tdata.train
Tdata.eval
Tdata.train <- as.data.frame(modelData(data.model, data.window=c('1990-01-02','2011-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c('2012-01-01','2014-08-18'))))
Tform <- as.formula('T.ind.TAP.AX ~ .')
Tform
head(Tdata.eval)
Tform <- as.formula('T.ind.quote.data ~ .')
Tform
today()
date()
format(date(),"%Y%m%d")
data.model
quote.data
quote.data[nrow(quote.data)]
quote.data[nrow(quote.data),1]
attr(quote.data)
Tdata.train <- as.data.frame(modelData(data.model, data.window=c('1990-01-02','2011-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c('2012-01-01','2014-08-18'))))
Tform <- as.formula('T.ind.quote.data ~ .')
Tform
date <- rownames(Tdata.train[start+len.tr,])
market <- quote.data[paste(date,'/',sep='')][1:len.ts]
date
market
library(e1071)
s <- svm(Tform,Tdata.train[tr,],cost=10,gamma=0.01)
p <- predict(s,Tdata.train[ts,])
sig <- trading.signals(p,0.1,-0.1)
s
library(DMwR)
sig <- trading.signals(p,0.1,-0.1)
sig
source("Trading policy.R")
t1 <- trading.simulator(market,sig,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
plot(t1, market, theme = "white", name = "SP500")
source("Trading policy2.R")
t2 <- trading.simulator(market, sig, "policy.2", list(exp.prof = 0.05, bet = 0.3))
summary(t2)
tradingEvaluation(t2)
plot(t2, market, theme = "white", name = "SP500")
# The list of learners we will use
TODO <- c('svmR','svmC','earth','nnetR','nnetC')
# The datasets used in the comparison
DSs <- list(dataset(Tform,Tdata.train,'SP500'))
# Monte Carlo (MC) settings used
MCsetts <- mcSettings(20, # 20 repetitions of the MC exps
2540, # ~ 10 years for training
1270, # ~ 5 years for testing
1234) # random number generator seed
# Variants to try for all learners
VARS <- list()
VARS$svmR <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$svmC <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$earth <- list(nk=c(10,17),degree=c(1,2),thresh=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetR <- list(linout=T,maxit=750,size=c(5,10),
decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetC <- list(maxit=750,size=c(5,10),decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
VARS
MCsetts
?mcSettings
eval.stats <- function(form,train,test,preds,b.t=0.1,s.t=-0.1,...) {
# Signals evaluation
tgtName <- all.vars(form)[1]
test[,tgtName] <- trading.signals(test[,tgtName],b.t,s.t)
st <- sigs.PR(preds,test[,tgtName])
dim(st) <- NULL
names(st) <- paste(rep(c('prec','rec'),each=3),c('s','b','sb'),sep='.')
# Trading evaluation
date <- rownames(test)[1]
market <- GSPC[paste(date,"/",sep='')][1:length(preds),]
trade.res <- trading.simulator(market,preds,...)
c(st,tradingEvaluation(trade.res))
}
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
# Train and test periods
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
user.quote <- "IBM"
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
rm(list=ls())
gp()
cg()
