setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
install.packages("tseries")
tseries
library(tseries)
t.ibm <- get.hist.quote("IBM",start="1970-01-02",end="2002-05-17", quote=c("Open", "High", "Low", "Close","Volume"))
plot(t.ibm[,c(’Close’,’Volume’)],main="IBM stock")
plot(t.ibm[,c('Close','Volume')],main="IBM stock")
cf()
head(t.ibm)
?get.hist.quote
ts(rnorm(25), frequency = 4, start = c(1959, 2))
ts(rnorm(25), frequency = 2, start = c(1959, 2))
ts(rnorm(25), frequency = 12, start = c(1959, 2))
ts(rnorm(25), frequency = 4, start = c(1959, 2))
plot(as.ts(ibm[,c(’Close’,’Volume’)]),main="IBM stock")
plot(as.ts(ibm[,c("Close","Volume")]),main="IBM stock")
plot(as.ts(t.ibm[,c("Close","Volume")]),main="IBM stock")
plot(t.ibm[,c('Close','Volume')],main="IBM stock")
ibm <- get.hist.quote("IBM",start="1970-01-02",end="2002-05-17", quote=c("Open", "High", "Low", "Close","Volume"))
plot(ibm[,c('Close','Volume')],main="IBM stock")
ibm[c(1,nrow(ibm)),]
ibm <- get.hist.quote("IBM",start="1970-01-02",end="2013-05-17", quote=c("Open", "High", "Low", "Close","Volume"))
plot(ibm[,c('Close','Volume')],main="IBM stock")
ibm[c(1,nrow(ibm)),]
ibm <- get.hist.quote("IBM",start="1970-01-02",end="2014-08-17", quote=c("Open", "High", "Low", "Close","Volume"))
plot(ibm[,c('Close','Volume')],main="IBM stock")
ts(rnorm(25), frequency = 4, start = c(1959, 2))
ibm[c(1,nrow(ibm)),]
h.returns <- function(x,h=1) {
diff(x,lag=h)/x[1:(length(x)-h)]
}
h.returns(c(45,23,4,56,-45,3),h=2)
install.packages("ts")
library(ts)
install.packages("xts")
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
library(xts)
x1 <- xts(rnorm(100),seq(as.POSIXct("2000-01-01"), len = 100, by = "day"))
x1
x1[1:5]
x2 <- xts(rnorm(100),seq(as.POSIXct("2000-01-01 13:00"),len = 100,by="min"))
x2[1:4]
x3 <- xts(rnorm(100,as.Date(c("2005-01-01","2006-01-10","1989-06-24"))))
x3 <- xts(rnorm(100,as.Date(c("2005-01-01","2006-01-10","2989-06-24"))))
x3 <- xts(rnorm(100,as.Date(c("2005-01-01","2006-01-10","2014-06-24"))))
x3 <- xts(rnorm(100,as.Date(c("2005-01-01","2005-01-10","2005-06-24"))))
x3 <- xts(rnorm(100,as.Date(c("2005-01-01","2005-01-10","2005-01-12"))))
x3 <- xts(rnorm(100),as.Date(c("2005-01-01","2005-01-10","1905-01-12"))))
x3 <- xts(rnorm(100),as.Date(c("2005-01-01","2005-01-10","1905-01-12")))
x3 <- xts(rnorm(100),as.Date(c("2005-01-01","2005-01-10","2905-01-12")))
x3 <- xts(rnorm(3), as.Date(c("2005-01-01", "2005-01-10", "2005-01-12")))
x3 <- xts(rnorm(3), as.Date(c("2005-01-01", "2005-01-10", "1005-01-12")))
x3
x1["2000-04"]
x1["2000-03-27/"]
x1["2000-02-26/2000-03-03"]
x1["/20000103"]
mts.vals <- matrix(round(rnorm(25),2),5,5)
mts.vals
colnames(mts.vals) <- paste('ts',1:5,sep='')
mts.vals
mts <- xts(mts.vals,as.POSIXct(c('2003-01-01','2003-01-04',
'2003-01-05','2003-01-06','2003-02-16')))
mts
mts["2003-01",c("ts2","ts5")]
index(mts)
coredata(mts)
library(tseries)
GSPC <- as.xts(get.hist.quote("^GSPC",start="1970-01-02",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
GSPC[1:nrow(GSPC)]
GSPC[c(1,nrow(GSPC))]
GSPC <- as.xts(get.hist.quote("^GSPC",start="1970-01-02",end="2009-09-15",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
GSPC[c(1,nrow(GSPC))]
install.packages("quantmod")
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
library(quantmod)
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
GSPC
head(GSPC)
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
head(GSPC)
GSPC[c(1,nrow(GSPC))]
setSymbolLookup(IBM=list(name='IBM',src='yahoo'),USDEUR=list(name='USD/EUR',src='oanda))
)
setSymbolLookup(IBM=list(name='IBM',src='yahoo'),
USDEUR=list(name='USD/EUR',src='oanda'))
getSymbols(c('IBM','USDEUR'))
head(IBM)
head(USDEUR)
loadSymbolLookup()
loadSymbolLookup(IBM)
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean)
r <- matrix(NA, ncol = n.days, nrow = NROW(quotes))
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x)
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
candleChart(last(GSPC, "3 months"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
candleChart(last(GSPC, "3 months"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
addAvgPrice(on = 1)
addT.ind()
candleChart(last(GSPC, "3 months"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
addAvgPrice(on = 1)
addT.ind()
png("indicator.png")
candleChart(last(GSPC, "3 months"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
addAvgPrice(on = 1)
addT.ind()
dev.off()
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
install.packages("TTR")
install.packages("TTR")
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns")
library(tseries)
library(xts)
# As the function get.hist.quote() returns an object of class zoo, we have
# again used the function as.xts() to coerce it to xts.
GSPC <- as.xts(get.hist.quote("^GSPC",start="1970-01-02",end="2009-09-15",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
GSPC[c(1,nrow(GSPC))]
# quantmod
library(quantmod)
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
setSymbolLookup(IBM=list(name='IBM',src='yahoo'),
USDEUR=list(name='USD/EUR',src='oanda'))
getSymbols(c('IBM','USDEUR'))
head(IBM)
head(USDEUR)
# saveSymbolLookup()
# loadSymbolLookup()
# indicator function
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean)
r <- matrix(NA, ncol = n.days, nrow = NROW(quotes))
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x)
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
# newTA() can be used to create new
# plotting functions for indicators that we wish to include in candlestick graphs.
png("indicator.png")
candleChart(last(GSPC, "3 months"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
addAvgPrice(on = 1)
addT.ind()
dev.off()
# a representative set of technical indicators, from those available in package TTR
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
# Build a random forest using the data available for training:
data(GSPC)
library(randomForest)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC) + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC) + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
GSPC
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC) + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC) + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
Delt(Cl(GSPC),k=1:10)
GSPC <- as.xts(get.hist.quote("^GSPC",start="1970-01-02",end="2009-09-15",
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
Delt(Cl(GSPC),k=1:10)
library(quantmod)
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
Delt(Cl(GSPC)
Delt(Cl(GSPC),k=1:10)
rm(GSPC)
library(quantmod)
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
GSPC
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC) + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC) + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
Cl(GSPC)
rm(GSPC)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC) + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC) + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
T.ind(GSPC)
Delt(Cl(GSPC),k=1:10)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC) + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC) + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
ex.model <- specifyModel(T.ind(IBM) ~ Delt(Cl(IBM), k = 1:3))
data <- modelData(ex.model, data.window = c("2009-01-01", "2009-08-10"))
IBM
data
m <- myFavouriteModellingTool(ex.model@model.formula, as.data.frame(data))
