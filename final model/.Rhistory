user.quote <- "IBM"
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
rm(list=ls())
user.quote <- "IBM"
library(xts)
library(tseries)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
start <- 1
len.tr <- 0.8*nrow(quote.data)
len.ts <- nrow(quote.data)-len.tr
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
tr
ts
len.tr
len.tr <- as.integer(0.8*nrow(quote.data))
len.tr
len.ts <- nrow(quote.data)-len.tr
len.ts
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# creating T.indicator
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
# define financial indicators of stock
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
# define the dependent and independent variables of the model
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
library(xts)
library(tseries)
# define the dependent and independent variables of the model
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
library(quantmod)
# define the dependent and independent variables of the model
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
Tdata.train <- as.data.frame(modelData(data.model, data.window=c('1990-01-02','2011-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c('2012-01-01','2014-08-18'))))
Tform <- as.formula('T.ind.quote.data ~ .')
date <- rownames(Tdata.train[start+len.tr,])
market <- quote.data[paste(date,'/',sep='')][1:len.ts]
market
sum(is.na(market))
date <- rownames(Tdata.train[start+len.tr,])
head(date)
paste(date,'/',sep='')
Tdata.train\
Tdata.train
Tdata.train[c(1,nrow(Tdata.train))]
Tdata.train[c(1,nrow(Tdata.train)),1]
Tdata.train[c(1,nrow(Tdata.train)),]
Tdata.eval[c(1,nrow(Tdata.eval)),]
Tdata.train[start+len.tr,]
start+len.tr
Tdata.train <- as.data.frame(modelData(data.model, data.window=c('1970-01-02','2011-12-31')))
Tdata.train
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c('2012-01-01','2014-08-18'))))
Tform <- as.formula('T.ind.quote.data ~ .')
date <- rownames(Tdata.train[start+len.tr,])
date
market <- quote.data[paste(date,'/',sep='')][1:len.ts]
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(1,len.tr)))
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,len.tr)))
Tdata.train
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c((start+len.tr),start+len.tr+len.ts-1)))))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c((start+len.tr),(start+len.tr+len.ts-1)))))
Tdata.eval
Tform <- as.formula('T.ind.quote.data ~ .')
date <- rownames(Tdata.train[start+len.tr,])
date
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,(start+len.tr)))
)
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,(start+len.tr))))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c((start+len.tr),(start+len.tr+len.ts-1)))))
Tform <- as.formula('T.ind.quote.data ~ .')
# Subsetting the train data
date <- rownames(Tdata.train[start+len.tr,])
date
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,len.tr)))
date <- rownames(Tdata.train[len.tr,])
date
Tdata.train[len.tr]
Tdata.train[len.tr,]
Tdata.train[len.tr-1,]
Tdata.train[len.tr-100,]
Tdata.train
Tdata.train[100,]
Tdata.train[(len.tr-100),]
len.tr
nrow(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(1,9008)))
nrow(Tdata.train)
data.model
nrow(quote.data)
rownames(quote.data[start,])
quote.data
rownames(quote.data)
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,len.tr)))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c((start+len.tr),(start+len.tr+len.ts-1)))))
Tform <- as.formula('T.ind.quote.data ~ .')
Tdata.train[rnow(Tdata.train)]
Tdata.train[rnow(Tdata.train),]
rnow(Tdata.train)
Tdata.train[nrow(Tdata.train),]
Tdata.eval[1,]
date <- rownames(Tdata.train[nrow(Tdata.train),])
date
market <- quote.data[paste(date,'/',sep='')][1:len.ts]
market
head(market)
paste(date,'/',sep='')
quote.data[paste(date,'/',sep='')]
quote.data[paste(date,'/',sep='')][1]
quote.data[paste(date,'/',sep='')][len.ts]
date[len.ts]
date[len.tr]
date[nrow(Tdata.train)]
date
market[1]
market[2]
tail(market)
nrow(market)
Tform
Tdata.train[tr,]
s <- svm(Tform,Tdata.train[tr,],cost=10,gamma=0.01)
library(e1071)
library(DMwR)
s <- svm(Tform,Tdata.train[tr,],cost=10,gamma=0.01)
p <- predict(s,Tdata.train[ts,])
sig <- trading.signals(p,0.1,-0.1)
# now using the simulated trader
source("Trading policy.R")
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns\\final model")
source("Trading policy.R")
len.ts
len.tr
t1 <- trading.simulator(market,sig,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
source("Trading policy.R")
t1 <- trading.simulator(market,sig,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
sig
p
s
Tdata.train[ts,]
head(Tdata.train[ts,])
ts
rm(list=ls())
user.quote <- "IBM"
library(xts)
library(tseries)
library(quantmod)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
nrow(quote.data)
start <- 1
len.tr <- as.integer(0.8*nrow(quote.data))
len.tr
len.ts <- nrow(quote.data)-len.tr
len.ts
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
nrow(tr)
tr[1]
tail(tr)
str(tr)
str(ts)
ts[2253]
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
ts[2253]
sum(is.na(quote.data$Volume))
quote.data$Volume <- quote.data$Volume + 10^-15
sum(is.na(quote.data$Volume))
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,len.tr)))
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
Tdata.train <- as.data.frame(modelData(data.model, data.window=c(start,len.tr)))
nrow(Tdata.train)
len.tr
start
?modelData
quote.data[1]
quote.data[9008]
quote.data[9009]
quote.data[nrow(quote.data)]
nrow(quote.data)
nrow(quote.data[1:len.tr])
rownames(quote.data[1])
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("2014-08-18","2005-09-02")))
nrow(Tdata.train)
Tdata.train
Tdata.train[1]
quote.data[1]
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("1970-01-02","2005-09-02")))
Tdata.train[1]
nrow(Tdata.train)
quote.data[1]
quote.data[9003]
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("1970-01-02","2005-08-26")))
nrow(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model)))
Tdata.train <- as.data.frame(modelData(data.model))
nrow(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("1970-01-02","2005-08-26")))
nrow(Tdata.train)
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c("2005-08-27","2014-08-18"))))
nrow(Tdata.eval)
nrow(Tdata.eval)+nrow(Tdata.train)
len.ts
len.tr
len.tr + len.ts
nrow(quote.data)
sum(is.na(quote.data))
Tdata.train <- as.data.frame(modelData(data.model))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c("2005-08-27","2014-08-18"))))
Tform <- as.formula('T.ind.quote.data ~ .')
nrow(Tdata.train)
nrow(Tdata.eval)
date <- rownames(Tdata.train[nrow(Tdata.train),])
date
market <- quote.data[paste(date,'/',sep='')][1:len.ts]
market <- quote.data[paste(date,'/',sep='')][1:nrow(Tdata.train)]
quote.data[paste(date,'/',sep='')]
nrow(Tdata.train)
len.ts
quote.data
T.ind(quote.data)
Delt(Cl(quote.data),k=1:10)
myATR(quote.data)
mySMI(quote.data)
myADX(quote.data)
myAroon(quote.data)
myBB(quote.data)
myChaikinVol(quote.data)
myCLV(quote.data)
CMO(Cl(quote.data))
EMA(Delt(Cl(quote.data)))
myEMV(quote.data)
myVolat(quote.data)
myMACD(quote.data)
myMFI(quote.data)
RSI(Cl(quote.data))
mySAR(quote.data)
runMean(Cl(quote.data))
runSD(Cl(quote.data))
rm(list-ls())
rm(list=ls())
setwd("C:\\Documents and Settings\\Macro\\Desktop\\Ivandata\\Predicting-Stock-Market-Returns\\final model")
# getting the quotes for the testing period
user.quote <- "TAP.AX"
library(xts)
library(tseries)
library(quantmod)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
nrow(quote.data)
# Train and test periods
start <- 1
len.tr <- as.integer(0.8*nrow(quote.data))
len.ts <- nrow(quote.data)-len.tr
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# creating T.indicator
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
# define financial indicators of stock
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
# define the dependent and independent variables of the model
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
nrow(quote.data)
len.tr
len.ts
quote.data[1]
quote.data[3255]
quote.data[3256]
quote.data[4069]
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("1996-09-30","2011-07-05")))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c("2011-07-06","2014-08-18"))))
Tform <- as.formula('T.ind.quote.data ~ .')
nrow(Tdata.train)
date <- rownames(Tdata.train[nrow(Tdata.train),])
date
market <- quote.data[paste(date,'/',sep='')][1:len.ts]
market
len.ts
date
Tdata.train[nrow(Tdata.train),]
market[1]
market <- quote.data[paste(date,'/',sep='')][2:len.ts]
market[1]
market[len.ts]
market[len.ts-1]
nrow(Tdata.train)
len.tr
library(e1071)
library(DMwR)
s <- svm(Tform,Tdata.train[tr,],cost=10,gamma=0.01)
tr
p <- predict(s,Tdata.train[ts,])
sig <- trading.signals(p,0.1,-0.1)
p
Tdata.train[ts,]
ts
ts[1]
Tdata.train[3256,]
nrow(Tdata.train)
Tdata.train[3217,]
ts(1)
ts[1]
ts
set.seed(1234)
library(nnet)
library(DMwR)
norm.data <- scale(Tdata.train)
norm.data
nn <- nnet(Tform, norm.data[1:1000, ], size = 10, decay = 0.01,maxit = 1000, linout = T, trace = F)
norm.preds <- predict(nn, norm.data[1001:nrow(norm.data), ])
norm.preds
preds <- unscale(norm.preds, norm.data)
preds
sigs.nn <- trading.signals(preds, 0.1, -0.1)
sigs.nn
true.sigs <- trading.signals(Tdata.train[1001:nrow(Tdata.train), "T.ind.TAP.AX"],0.1, -0.1)
true.sigs
true.sigs <- trading.signals(Tdata.train[1001:nrow(Tdata.train), "T.ind.user.quote"],0.1, -0.1)
true.sigs
Tdata.train[1]
Tdata.train[1]
Tdata.train[1,]
true.sigs <- trading.signals(Tdata.train[1001:nrow(Tdata.train), "T.ind.quote.data"],0.1, -0.1)
true.sigs
sigs.PR(sigs.nn, true.sigs)
source("Trading policy.R")
t1 <- trading.simulator(market,sig,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
market
sig
t1 <- trading.simulator(market,true.sigs,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
summary(t1)
tradingEvaluation(t1)
plot(t1, market, theme = "white", name = "SP500")
source("Trading policy2.R")
t2 <- trading.simulator(market, true.sigs, "policy.2", list(exp.prof = 0.05, bet = 0.3))
plot(t2, market, theme = "white", name = "SP500")
