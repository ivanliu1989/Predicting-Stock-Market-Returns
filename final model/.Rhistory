pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
my_mean <- mean(my_data$pollutant,na.rm = TRUE)
print(my_mean)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
print(colnames(my_data))
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
print(my_data$pollutant)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
print(my_data[,pollutant])
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean <-function(directory, pollutant, id=1:332){
my_data <- c()
filename <- paste("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/datasciencecoursera/",directory,"/",sep="")
for(i in id){
if (i <10){
i <- paste("00",i,sep="")
}else if(i<100){
i<-paste("0",i,sep="")
}
filename2 <- paste(filename, i,".csv",sep="")
my_data <- rbind(my_data,read.csv(filename2,header = TRUE))
}
my_mean <- mean(my_data[,pollutant],na.rm = TRUE)
print(my_mean)
}
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","nitrate",23)
My first R Markdown File
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("week2quiz","6614a43b7641be7a6666")
myapp <- oauth_app("github","6614a43b7641be7a6666")
myapp <- oauth_app("github","6614a43b7641be7a6666")
myapp <- oauth_app("github","56b637a5baffac62cad9")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth_app
myapp <- oauth_app("week2quiz", "67926c344faef2ea1e88083564fb60df94109452")
myapp <- oauth_app("week2quiz", "67926c344faef2ea1e88083564fb60df94109452")
github_token <- oauth2.0_token(oauth_endpoints("week2quiz"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages(c("Formula", "gplots", "gtools", "markdown", "mboost", "mime", "multcomp", "mvoutlier", "party", "randomForest", "rattle", "Rcpp", "RCurl", "rgl", "RGtk2", "rjson", "sandwich", "sem", "swirl", "tm", "vcd", "wordcloud", "XLConnect", "xlsx"))
require(shiny)
runExample("01_Hello")
library(RODBC)
?odbcConnect
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
channel <- odbcDriverConnect("")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
library(RODBC)
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
sqlTables();
?RODBC
da <- sqlQuery(myconn, "select top 5 * from dbo.train")
da
da <- sqlQuery(myconn, "select top 5 * from criteo-kaggle.train")
da
da <- sqlQuery(myconn, "select top 5 * from Criteo-Kaggle.train")
da
library(sqldf)
criteo.data <- sqlFetch(myconn, "Criteo-Kaggle")
criteo.data <- sqlFetch(myconn, Criteo-Kaggle)
criteo.data <- sqlFetch(myconn, "AdventureWorks2012")
criteo.data <- sqlFetch(myconn, "Criteo-Kaggle.train")
criteo.data <- sqlFetch(myconn, "train")
sqlTables(myconn)
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
myconn
sqlTables(myconn)
?sqlFetch
criteo.data <- sqlFetch(myconn, "MSreplication_options")
criteo.data
da <- sqlQuery(criteo.data, "select top 5 * from MSreplication_options")
da <- sqlQuery(myconn, "select top 5 * from MSreplication_options")
da
myconn <- odbcConnect("IVAN_LIU.AdventureWorks2012","sa","clouds123")
myconn <- odbcConnect("IVAN_LIU","sa","clouds123")
close(myconn)
install.packages("snowfall")
require(snowfall)
sfInit (parallel=T, cpus=4)
result <- sfLapply(1:10,log)
result
sfStop()
sfCpus()
sfClusterEvalQ(ls())
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400))
print(G, "chart")
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400, region = "150"))
print(G2, "chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line, "chart")
setwd("C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/interactive-charts")
library(shiny)
runExample("01_hello")
runApp("App-1")
runApp("App-1")
runApp("App-1", display.mode="showcase")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # shiny app built from HTML
runExample("08_html") # shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
titlePanel(h4("my title")),
shiny::runApp('App-1')
shiny::runApp('App-1')
h6("Sixth level title", align="center"))
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
?selectInput
shiny::runApp('App-1')
shiny::runApp('App-2')
shiny::runApp('App-2')
shiny::runApp('App-3')
shiny::runApp('App-3')
shiny::runApp('App-3')
shiny::runApp('App-3')
runApp("censusVis", display.mode = "showcase")
runApp("census-app", display.mode = "showcase")
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
counties <- readRDS("census-app/data/counties.rds")
head(counties)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
?do.call
shiny::runApp('stockVis')
install.packages("quantmod")
shiny::runApp('stockVis')
shiny::runApp('stockVis')
shiny::runApp('stockVis')
shiny::runApp('stockVis')
install.packages("shinyapps")
shinyapps::setAccountInfo(name='ivanliu1989', token='1E877F87A6C2DCCF5DE964D73F4875BE', secret='9srUXMP3o8jChzSaz9gMofZsoFn6a4HgxExyKyb1')
install.packages("shinyapps")
install_github('shinyapps')
require(devTools)
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
map3$print("chart7")
source('~/.active-rstudio-document', echo=TRUE)
require(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
choices = sort(unique(dat2m$year)),
shiny::runApp('ivan-rChartsShiny/rChartOECD')
intall.packages("bitops")
install.packages("bitops")
install.packages("bitops")
))
shiny::runApp()
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
data(tips, package = 'reshape2')
rPlot(x = 'day', y = 'box(tip)', data = tips, type = 'box')
dat = count(mtcars, .(gear, am))
rPlot(x = 'bin(gear, 1)', y = 'freq', data = dat, type = 'bar', facet = 'am')
dat = expand.grid(x = 1:5, y = 1:5)
dat = transform(dat, value = sample(1:5, 25, replace = T))
rPlot(x = 'bin(x, 1)', y = 'bin(y, 1)', color = 'value', data = dat, type = 'tile')
# Example 6 (NBA Heat Map)
nba <- read.csv('http://datasets.flowingdata.com/ppg2008.csv')
nba.m <- ddply(melt(nba), .(variable), transform, rescale = rescale(value))
p1 <- rPlot(Name ~ variable, color = 'rescale', data = nba.m, type = 'tile', height = 600)
p1$guides("{color: {scale: {type: gradient, lower: white, upper: steelblue}}}")
p1
require(plyr)
nba <- read.csv('http://datasets.flowingdata.com/ppg2008.csv')
nba.m <- ddply(melt(nba), .(variable), transform, rescale = rescale(value))
p1 <- rPlot(Name ~ variable, color = 'rescale', data = nba.m, type = 'tile', height = 600)
p1$guides("{color: {scale: {type: gradient, lower: white, upper: steelblue}}}")
p1
require(reshape)
nba <- read.csv('http://datasets.flowingdata.com/ppg2008.csv')
nba.m <- ddply(melt(nba), .(variable), transform, rescale = rescale(value))
p1 <- rPlot(Name ~ variable, color = 'rescale', data = nba.m, type = 'tile', height = 600)
p1$guides("{color: {scale: {type: gradient, lower: white, upper: steelblue}}}")
p1
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Predicting-Stock-Market-Returns\\final model")
# getting the quotes for the testing period
user.quote <- "TAP.AX"
library(xts)
library(tseries)
library(quantmod)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
nrow(quote.data)
# Train and test periods
start <- 1
len.tr <- as.integer(0.8*nrow(quote.data))
len.ts <- nrow(quote.data)-len.tr
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# creating T.indicator
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
# define financial indicators of stock
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
# define the dependent and independent variables of the model
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
# transfer training and testing stock data into data.frame
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("1996-09-30","2011-07-05")))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c("2011-07-06","2014-08-18"))))
Tform <- as.formula('T.ind.quote.data ~ .')
# Subsetting the train data
date <- rownames(Tdata.train[nrow(Tdata.train),])
market <- quote.data[paste(date,'/',sep='')][2:len.ts]
# learning the model and obtaining its signal predictions
set.seed(1234)
library(nnet)
library(DMwR)
source("Monte Carlo.R")
grow
norm.data <- scale(Tdata.train)
nn <- nnet(Tform, norm.data[1:1000, ], size = 10, decay = 0.01,maxit = 1000, linout = T, trace = F)
norm.preds <- predict(nn, norm.data[1001:nrow(norm.data), ])
preds <- unscale(norm.preds, norm.data)
sigs.nn <- trading.signals(preds, 0.1, -0.1)
true.sigs <- trading.signals(Tdata.train[1001:nrow(Tdata.train), "T.ind.quote.data"],0.1, -0.1)
sigs.PR(sigs.nn, true.sigs)
# now using the simulated trader
source("Trading policy.R")
t1 <- trading.simulator(market,true.sigs,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
summary(t1)
tradingEvaluation(t1)
plot(t1, market, theme = "white", name = "ASX200")
source("Trading policy2.R")
t2 <- trading.simulator(market, true.sigs, "policy.2", list(exp.prof = 0.05, bet = 0.3))
summary(t2)
tradingEvaluation(t2)
plot(t2, market, theme = "white", name = "ASX200")
require(rCharts)
rPlot(t2,market)
t2
maarket
market
head(market)
rPlot(Adjusted,Volume,market)
rPlot("Adjusted","Volume",market)
rPlot("Adjusted","Volume",market)
rPlot(x="Adjusted",y="Volume",data=market)
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print()
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Predicting-Stock-Market-Returns\\final model")
# getting the quotes for the testing period
user.quote <- "TAP.AX"
library(xts)
library(tseries)
library(quantmod)
quote.data <- as.xts(get.hist.quote(user.quote,start="1970-01-02",quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
colnames(quote.data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
quote.data[c(1,nrow(quote.data))]
nrow(quote.data)
# Train and test periods
start <- 1
len.tr <- as.integer(0.8*nrow(quote.data))
len.ts <- nrow(quote.data)-len.tr
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# creating T.indicator
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean) # HLC()-subset High, Low and Close. Apply - calculate avg of those three by row
r <- matrix(NA, ncol = n.days, nrow = nrow(quotes)) # nrow * n.days matrix with NA
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x) # Delt() - calculate the k-period percent diff between n and n+x.
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x < -tgt.margin])) # sum % change larger than 0.025 in r, if >0 good, <0 bad.
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
# define financial indicators of stock
library(TTR)
myATR <- function(x) ATR(HLC(x))[, "atr"]
mySMI <- function(x) SMI(HLC(x))[, "SMI"]
myADX <- function(x) ADX(HLC(x))[, "ADX"]
myAroon <- function(x) aroon(x[, c("High", "Low")])$oscillator
myBB <- function(x) BBands(HLC(x))[, "pctB"]
myChaikinVol <- function(x) Delt(chaikinVolatility(x[, c("High", "Low")]))[, 1]
myCLV <- function(x) EMA(CLV(HLC(x)))[, 1]
myEMV <- function(x) EMV(x[, c("High", "Low")], x[, "Volume"])[,2]
myMACD <- function(x) MACD(Cl(x))[, 2]
myMFI <- function(x) MFI(x[, c("High", "Low", "Close")], x[, "Volume"])
mySAR <- function(x) SAR(x[, c("High", "Close")])[, 1]
myVolat <- function(x) volatility(OHLC(x), calc = "garman")[,1]
# define the dependent and independent variables of the model
quote.data$Volume <- quote.data$Volume + 10^-15
data.model <- specifyModel(T.ind(quote.data) ~ Delt(Cl(quote.data),k=1:10) +
myATR(quote.data) + mySMI(quote.data) + myADX(quote.data) + myAroon(quote.data) +
myBB(quote.data) + myChaikinVol(quote.data) + myCLV(quote.data) +
CMO(Cl(quote.data)) + EMA(Delt(Cl(quote.data))) + myEMV(quote.data) +
myVolat(quote.data) + myMACD(quote.data) + myMFI(quote.data) + RSI(Cl(quote.data)) +
mySAR(quote.data) + runMean(Cl(quote.data)) + runSD(Cl(quote.data)))
# transfer training and testing stock data into data.frame
Tdata.train <- as.data.frame(modelData(data.model, data.window=c("1996-09-30","2011-07-05")))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model, data.window=c("2011-07-06","2014-08-18"))))
Tform <- as.formula('T.ind.quote.data ~ .')
# Subsetting the train data
date <- rownames(Tdata.train[nrow(Tdata.train),])
market <- quote.data[paste(date,'/',sep='')][2:len.ts]
# learning the model and obtaining its signal predictions
set.seed(1234)
library(nnet)
library(DMwR)
source("Monte Carlo.R")
grow
norm.data <- scale(Tdata.train)
nn <- nnet(Tform, norm.data[1:1000, ], size = 10, decay = 0.01,maxit = 1000, linout = T, trace = F)
norm.preds <- predict(nn, norm.data[1001:nrow(norm.data), ])
preds <- unscale(norm.preds, norm.data)
sigs.nn <- trading.signals(preds, 0.1, -0.1)
true.sigs <- trading.signals(Tdata.train[1001:nrow(Tdata.train), "T.ind.quote.data"],0.1, -0.1)
sigs.PR(sigs.nn, true.sigs)
# now using the simulated trader
source("Trading policy.R")
t1 <- trading.simulator(market,true.sigs,'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
summary(t1)
tradingEvaluation(t1)
plot(t1, market, theme = "white", name = "ASX200")
source("Trading policy2.R")
t2 <- trading.simulator(market, true.sigs, "policy.2", list(exp.prof = 0.05, bet = 0.3))
summary(t2)
tradingEvaluation(t2)
plot(t2, market, theme = "white", name = "ASX200")
# server.R
shiny::runApp('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/interactive-charts/stockVis')
rPlot(finalInput())
shiny::runApp('C:/Users/Ivan.Liuyanfeng/Desktop/Data_Mining_Work_Space/interactive-charts/stockVis')
